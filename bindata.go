package cbcluster

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path"
	"path/filepath"
)

func bindata_read(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindata_file_info struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindata_file_info) Name() string {
	return fi.name
}
func (fi bindata_file_info) Size() int64 {
	return fi.size
}
func (fi bindata_file_info) Mode() os.FileMode {
	return fi.mode
}
func (fi bindata_file_info) ModTime() time.Time {
	return fi.modTime
}
func (fi bindata_file_info) IsDir() bool {
	return false
}
func (fi bindata_file_info) Sys() interface{} {
	return nil
}

var _data_couchbase_node_service_template = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x93\xdf\xeb\xd3\x30\x14\xc5\xdf\xfb\x57\xe4\x41\x18\x08\xf9\xc6\x07\x9f\x26\x7d\xa8\xb3\x93\xbe\xac\xa3\xad\x43\x18\xa3\x64\xe9\x9d\x0b\x4b\x93\x98\x1f\x55\x19\xfb\xdf\xcd\xd6\xb1\xea\x8a\x54\xd0\xb7\xf0\xe1\x9c\x93\x7b\x2e\xdc\xed\x27\xc9\xdd\x2e\xfa\x00\x96\x19\xae\x1d\x57\x32\x66\xca\xb3\xe3\x9e\x5a\xa8\xa5\x6a\x20\x4a\x0e\x0e\x4c\xdc\x28\x76\x02\xf3\x62\xc1\x74\x9c\x41\x54\xc0\x57\xcf\x0d\xd8\x67\xde\x8b\xc1\xb1\x66\x2c\xfd\x8d\x46\xdb\xb2\x7f\xed\xa2\x8a\xb7\xa0\xbc\x2b\x1d\x35\xae\x04\x16\xbf\x19\x88\xd2\x3d\x48\x65\xc7\x8d\x92\x2d\x48\xb7\xe4\x02\x62\x12\xb2\x08\x0c\x30\x4a\xbf\x03\xbb\x05\xac\x0d\xc4\x98\x78\x6b\xc8\x9e\x4b\xd2\x4f\x87\x4e\x5c\x08\xf4\xa8\x35\x21\x36\xed\x9f\xa4\xcf\x4a\xed\x43\xac\xa6\x5e\x30\xaa\xc1\x3a\x2a\x7f\x90\x87\x13\x5f\x8b\x82\xc1\xe7\x33\x7a\x59\xbc\xaf\x37\x69\x51\x66\xf9\x0a\x5d\x2e\xf3\x1b\xc9\x57\x55\x92\xad\xd2\xa2\xae\x92\x8f\x01\xfe\xc3\x3f\x4c\x78\x1b\x76\x8e\xbf\xa8\x89\xe4\xf8\x16\x19\x3c\x47\x84\x19\x9a\x8d\x6a\x7b\x89\x30\x96\xb4\x85\xa1\x3e\xc2\x1d\x22\x4a\xbb\xe1\x3b\xd2\x51\x33\x1f\xa3\xab\x13\x5c\x7c\x54\xd6\xfd\x9f\x85\xa0\x5f\x7c\xd7\xe1\x67\xf7\x1e\x4a\xff\x5d\x8d\xa9\x61\x26\xb6\x86\xbc\x6e\xa8\x03\xfc\xcd\x50\xad\x43\xea\xc8\x88\x0c\xb4\xaa\x03\x4c\x65\x83\x0d\xec\xa9\xa0\x92\x85\x75\x61\xa1\x18\x15\x98\x6b\xf4\x6a\x91\x17\x69\x5e\xd6\xeb\x22\xdb\x24\x55\x5a\x67\xeb\xcd\xdb\x77\xc8\xfa\x46\xa1\xfb\xa4\x36\x94\x19\x82\x67\xe1\x22\x3e\xe3\xa5\x00\x08\xd7\xb8\x50\xf2\x20\x38\x73\xf6\xe9\x16\x5f\x3f\xce\xe7\x67\x00\x00\x00\xff\xff\xcd\x63\x47\xc0\xb7\x03\x00\x00")

func data_couchbase_node_service_template_bytes() ([]byte, error) {
	return bindata_read(
		_data_couchbase_node_service_template,
		"data/couchbase_node@.service.template",
	)
}

func data_couchbase_node_service_template() (*asset, error) {
	bytes, err := data_couchbase_node_service_template_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/couchbase_node@.service.template", size: 951, mode: os.FileMode(420), modTime: time.Unix(1426714021, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_couchbase_sidekick_service_template = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\x4d\x8b\xdb\x30\x14\xbc\xeb\x57\xe8\x50\xd8\x93\xd6\x3d\xf4\x54\x10\xd4\xbb\xf5\x16\x1f\xd6\x0e\xb6\xb3\x14\x42\x30\x5a\xf9\xa5\x16\x96\x25\x55\x1f\x69\x4b\xc8\x7f\xaf\x1d\x97\xa4\x89\x43\x1b\xf6\x26\x46\x33\xf3\xe6\x0d\x6f\xb5\x54\xc2\xaf\xd1\x67\x70\xdc\x0a\xe3\x85\x56\x94\xeb\xc0\xdb\x57\xe6\xa0\x76\xa2\x81\x4e\xf0\x0e\xc5\x1b\x0f\x96\x36\x9a\x77\x60\xef\x1d\xd8\xad\xe0\x80\x0a\xf8\x1e\x84\x05\x77\x89\x4f\x64\xf0\xbc\x99\x53\xcf\xd0\x89\xb8\x91\x00\x7e\xce\x3c\x87\x1f\x84\x6a\x5c\xa5\xff\xca\xa6\x74\x03\x9f\x76\x3b\x7c\xbf\xcc\xd2\xaa\xce\x96\xcf\x0f\x49\x81\xf7\xfb\x0b\xf3\xdb\xf9\x68\x55\x4e\xaf\x35\xaa\x44\x0f\x3a\xf8\xd2\x33\xeb\x4b\xe0\xf4\x3d\x4a\xd4\x56\x58\xad\x7a\x50\xfe\x49\x48\xa0\xd1\xb0\x47\x04\x27\x10\x25\x3f\x81\x1f\xf8\x0b\x0b\x94\x44\xc1\xd9\xe8\x55\xa8\x68\x6a\x06\x77\x42\x4a\x7c\x8c\x42\x8e\xb5\xfe\x5b\x65\xfb\xff\x6a\x2e\x25\x26\x0c\x83\x0c\x0b\x92\x33\x03\xce\x33\xf5\x2b\x3a\x59\x70\x19\xdc\xd0\x09\xf9\xa6\x3f\x8e\x3d\x3c\xe6\x59\x15\xa7\x59\x52\xd4\x55\xfc\x65\x68\xe2\xe4\x4c\x0f\x96\x83\xa6\xc5\x84\xe3\xbb\x59\xae\xa0\x30\x21\x8a\xf5\x70\x25\xdf\xf8\x03\x9e\xb6\xda\xf9\xb7\x06\xc1\xc1\x34\xcc\x03\xf9\x61\x99\x31\xc3\xbc\x99\x10\xbb\x31\x25\xb9\x3a\x5c\x6a\xce\x24\x11\x86\xbe\x7b\xcc\x8b\x24\x2f\xeb\x45\x91\xbe\xc4\x55\x52\xa7\x8b\x97\x0f\x77\x7f\x76\xd4\x66\xd6\x9c\x1b\xc0\x6b\x75\xa3\xd5\x57\xf2\x34\x9e\xe2\x1a\x3d\x33\xde\x0a\x05\xf9\xe6\xf6\xab\xfa\x1d\x00\x00\xff\xff\x6d\xe7\xf6\xa5\x5e\x03\x00\x00")

func data_couchbase_sidekick_service_template_bytes() ([]byte, error) {
	return bindata_read(
		_data_couchbase_sidekick_service_template,
		"data/couchbase_sidekick@.service.template",
	)
}

func data_couchbase_sidekick_service_template() (*asset, error) {
	bytes, err := data_couchbase_sidekick_service_template_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/couchbase_sidekick@.service.template", size: 862, mode: os.FileMode(420), modTime: time.Unix(1426714021, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_sync_gw_node_service_template = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x94\x51\x4f\xdb\x3e\x14\xc5\xdf\xfd\x29\xfc\x80\xc4\xff\x3f\xc9\xf1\x9e\x99\xf2\x50\x75\x05\xf1\x40\x99\x68\xa7\x6d\xaa\xaa\xc8\x38\xb7\xe9\x1d\x8e\x9d\xd9\xd7\xcd\x2a\xc4\x77\x9f\x43\x80\x2e\x2d\x13\xa2\x6f\xd6\xcd\xf1\xf5\xef\x1c\xe7\x7a\xf1\xd5\x22\x2d\xd9\x67\x08\xda\x63\x43\xe8\x6c\x1e\xb6\x56\x17\x55\x5b\x58\x57\x02\x1b\xad\x08\x7c\x5e\x3a\x7d\x07\x3e\x0b\xe0\x37\xa8\x81\xdd\xc0\xaf\x88\x1e\xc2\x7e\xbd\x17\x03\xe9\xf2\x50\x3a\xa8\xf6\xc2\x95\x01\xa0\x43\xe5\xb0\xcc\x16\xb3\x7e\xb5\x64\x73\xac\xc1\x45\x9a\x91\xf2\x34\x03\x9d\x7f\x64\x13\xbb\x41\xef\x6c\x0d\x96\xce\xd1\x40\x2e\xd3\x29\x12\x76\x45\x36\xf9\x0d\xfa\x51\xff\xc5\x43\x2e\x64\x0c\x5e\xde\xa2\x95\x3d\x37\xbf\x43\x63\xf8\x93\xdd\x37\xa4\xbe\x7e\x5d\xb8\xaf\x6b\x62\x6a\xd9\xa8\x68\xb4\x6a\x20\x90\xb2\x5b\xd9\xed\x13\x95\x22\x68\xd5\x56\x68\xe7\xc1\x85\xb3\xfb\x7b\x9e\x8d\xaf\xa7\xf3\xd1\xe5\x74\x72\x53\xcc\x47\x17\xfc\xe1\xe1\xdd\x8d\xb5\x8b\x7a\x7d\xab\x02\x08\x6d\x62\x48\x89\x8a\xca\x1d\xd1\xd9\x47\xcb\x85\xb0\x40\xf9\xda\x05\x3a\x12\x9e\xc7\xa6\x4c\x2a\xd1\x7a\xd5\x34\xa9\xe9\x01\x1b\x6f\x15\x92\x88\x96\xd0\x88\x74\xa2\x45\x5b\xbd\x0b\x4b\x6c\xb8\x5c\xbb\x1a\x64\x07\x71\xb6\x5b\x1e\x9b\xc9\x3e\x70\x6f\xb4\x4d\x1e\xed\x0a\x2b\xee\xa1\xf5\x48\x90\x08\xca\xd4\x19\xad\xea\x46\xe3\x2f\x02\x99\x0d\x37\x64\x3f\x83\xb3\x3b\x43\xf9\xa3\x93\xc4\xb1\xe6\x42\xf3\xd3\xd9\x8f\xe9\xb8\xb8\xf8\x56\x8c\xaf\xaf\xae\x2e\xe7\xf9\xc9\x7f\xdd\x34\x68\x32\xbc\x02\xe2\x3b\xe6\x4c\xbb\x7a\x90\x78\xfa\x54\xd7\x48\xff\x7f\xe2\xfc\x1f\xf1\xa8\x1a\x9e\x7f\xcc\x23\xd2\x7a\xe5\x76\x5f\x82\x08\x9d\x8f\x8e\xfe\x64\x48\xcf\x45\xc5\xdf\x0a\xe2\xf4\x29\x09\xd7\x1c\x5c\x6b\x48\xc5\x97\x51\x62\x8b\xef\xe2\xbc\x1b\xf7\x25\x1b\xa7\xdd\x06\x35\x85\xc1\xfb\xf3\xe1\xf9\x1d\xf8\x13\x00\x00\xff\xff\xb4\x07\x60\xbd\xa8\x04\x00\x00")

func data_sync_gw_node_service_template_bytes() ([]byte, error) {
	return bindata_read(
		_data_sync_gw_node_service_template,
		"data/sync_gw_node@.service.template",
	)
}

func data_sync_gw_node_service_template() (*asset, error) {
	bytes, err := data_sync_gw_node_service_template_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/sync_gw_node@.service.template", size: 1192, mode: os.FileMode(420), modTime: time.Unix(1426714021, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_sync_gw_sidekick_service_template = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xcb\x6a\xdc\x30\x14\xdd\xeb\x2b\xb4\x28\x64\xa5\xb8\x8b\xae\x0a\x82\x3a\xa9\x53\xbc\x88\x3d\xd8\x9e\x50\x18\x82\x51\xae\x6f\xc6\xc2\xb2\xa4\xea\x91\x69\x08\xf9\xf7\x6a\x32\x69\xd2\x8e\xa1\x0d\xd9\x89\xc3\x79\xe9\x70\x37\x6b\x2d\xc3\x35\xf9\x8a\x1e\x9c\xb4\x41\x1a\xcd\xfd\xbd\x86\x7e\xbb\xeb\xbd\x1c\x70\x92\x30\x91\xfc\x36\xa0\xe3\x83\x81\x09\xdd\xa9\x47\x77\x27\x01\x49\x83\x3f\xa2\x74\xe8\x8f\xf1\x03\x19\x03\x0c\x4b\xea\x5f\xe8\x99\xd4\x83\xef\xcc\x4b\x9c\x36\x03\x7e\x79\x78\xa0\xa7\xeb\xaa\xec\xfa\x6a\x7d\x79\x56\x34\xf4\xf1\xf1\xc8\xf8\xad\x6c\xb2\x69\x0f\xaf\x6b\xd2\xc9\x19\x4d\x0c\x6d\x10\x2e\xb4\x08\xfc\x23\x29\xf4\x9d\x74\x46\xcf\xa8\xc3\x85\x54\xc8\xb3\x54\x2c\xc3\x57\x90\x14\x3f\x11\x9e\xf8\x2b\x87\x9c\x65\xd1\xbb\xec\x46\xea\xec\xf0\x55\x3a\x49\xa5\xe8\xbe\x08\xdb\xee\xd8\xcb\x4a\xff\xd6\xb8\xf9\x3f\x8a\x63\x81\x8d\x29\xc4\x8a\xa8\x40\x58\xf4\x41\xe8\xfb\x0c\x4c\x84\xf1\x46\x78\x64\xa0\xa2\x4f\x6b\xb0\xad\xf9\xbc\xdf\xe0\xbc\xae\xba\xbc\xac\x8a\xa6\xef\xf2\x6f\x69\x85\x57\x67\xfe\x64\x99\x34\x23\x65\x40\x4f\x16\xad\xa2\xa6\x8c\x69\x31\xe3\xa2\xdd\x1e\xc7\xc0\x47\xe3\xc3\x7b\x6b\xd0\x68\x07\x11\x90\xed\x9c\xb0\x36\xa5\xfd\x8e\x78\x96\x51\x25\xa2\x86\xf1\xcf\x44\x65\x40\x28\x26\x2d\xff\x70\x5e\x37\x45\xdd\xf6\xab\xa6\xbc\xca\xbb\xa2\x2f\x57\x57\x9f\x4e\x9e\xbf\x65\xec\x62\x2c\x9f\xc0\xe5\xbe\x64\xf3\x9d\x5d\x28\xc4\x74\xdf\x97\x02\x46\xa9\xb1\xbe\x7d\xf3\x01\xfd\x0a\x00\x00\xff\xff\x56\x05\x7b\xe9\x19\x03\x00\x00")

func data_sync_gw_sidekick_service_template_bytes() ([]byte, error) {
	return bindata_read(
		_data_sync_gw_sidekick_service_template,
		"data/sync_gw_sidekick@.service.template",
	)
}

func data_sync_gw_sidekick_service_template() (*asset, error) {
	bytes, err := data_sync_gw_sidekick_service_template_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data/sync_gw_sidekick@.service.template", size: 793, mode: os.FileMode(420), modTime: time.Unix(1426714021, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _data_test_fleet_api_units_json = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xec\x9d\xef\x53\xda\xca\x1a\xc7\xdf\xfb\x57\xec\x30\x76\x6c\xef\xdc\x18\x7e\x09\x82\xc3\x4c\xad\xb5\xb7\xbe\xe8\xd5\x11\xdb\x7b\xcf\x1c\xce\x38\x21\xd9\xc0\x1e\x43\xc2\xc9\x0f\xa8\xe3\xf8\xbf\x9f\x4d\x10\x0a\x12\x85\x26\x9b\x9e\x5d\xfd\xfa\xc2\x0a\x2c\xc9\xf7\x79\x76\x79\xf6\xfb\x69\x76\xc3\xdd\x0e\xe1\x3f\xa5\xc8\x65\x61\x50\x6a\xff\x9e\x3c\x8a\x7f\xee\x16\x7f\x25\xaf\x9b\x91\xef\x53\x37\xec\x86\x46\x48\x4b\xed\x12\x73\x0d\x33\x64\x13\x5a\xfa\xf7\x6a\x33\x8b\x06\xcc\xa7\xd6\xa6\x66\xae\x31\x8a\x5f\x36\xfb\x76\x70\x6d\xb8\xae\x17\xb9\x26\x7d\xbf\x1f\x50\x7f\xc2\xcc\xb5\xc6\xde\x38\x64\x9e\xbb\x22\x2e\x5d\xe4\xe3\xc3\x7f\xa4\x81\xe9\xb3\xe4\xdd\x8f\x8e\xb9\x68\x19\x50\x33\x79\xb9\x5d\xfa\xca\x13\xf0\x54\xab\x89\xe1\x44\xf1\x01\x8f\x1f\xa4\x92\x93\x0f\x9f\xba\xa5\xb5\xb6\xf7\xeb\x6f\x7f\x5e\xe0\x07\xe6\x5a\xc1\x95\x27\x46\x5c\x92\x4c\xd7\xb3\xe8\xfb\x37\x6c\x91\xca\xfc\x1a\x8f\xed\x90\xfa\x52\x2b\x3c\xfd\x4e\x4d\x3e\xe0\xfc\x27\xcf\xff\x43\x65\x37\x75\x84\xad\x09\xd5\xfb\xcc\xd5\x83\x21\xd1\x4c\xd2\x2b\x4d\x87\xcc\xa1\x24\xf4\x23\x7a\x44\x2c\x8f\xd0\xd0\xb4\xcc\xd0\x21\x01\x0d\x89\x6e\x7a\x91\x39\xec\x1b\x01\xdd\x37\xbd\x91\x1e\xc7\xa7\x2f\x07\x49\xf6\xee\x48\xaf\xd7\x2b\x0d\xbd\x20\x8c\xff\x6d\x27\x8f\xde\x7c\x8e\x7f\xdf\xef\x11\x4d\x0b\xf9\x81\x1a\xe5\xa3\xc0\xa1\x74\x4c\xea\x07\x47\x96\xe7\xd2\x5e\x49\x58\x4e\xbc\xb1\xb8\x94\x44\x81\x9f\xa4\x65\x1e\xbf\x3f\xda\x18\xbe\x80\x38\xbe\x18\xe6\x90\xb9\xf4\xdc\xde\x1c\xc8\xff\xb5\x4f\x3c\x8d\xa2\x06\xe1\xca\x33\x7f\xec\xa4\x04\xf0\x7c\x81\x74\x0c\x5e\x28\x86\xd4\xda\x50\x20\x9f\x6a\x36\x9a\xc5\x7d\xf6\x91\xb7\x29\x57\xea\xb4\x51\xa9\x19\xf6\x61\xf3\xa0\xde\xac\xd7\x8c\x46\xb9\xd9\x6a\xd5\x9a\x56\xab\x69\x57\xcd\x5a\x63\xab\xe2\x5a\x41\x75\xcd\x25\x0e\xd5\x15\xd5\x15\xd5\xf5\x05\x56\xd7\x7a\xbd\x52\x69\x35\x5b\xf5\x4a\xad\xd1\xaf\x37\x5b\x76\xeb\xc0\xe8\xdb\x55\x5a\xa5\xe5\x8a\x5d\xe6\x85\x77\xab\xea\x5a\x45\x75\xcd\x25\x0e\xd5\x15\xd5\x15\xd5\xf5\x05\x56\x57\xbb\x41\x4d\xfb\xb0\x7e\xd8\x6f\x1a\x46\xdd\x6a\x34\x0e\xab\xf5\x66\xd5\x38\xa4\x95\x96\x51\x69\x9a\x8d\xca\x56\xd5\xb5\x86\xea\x9a\x4b\x1c\xaa\x2b\xaa\x2b\xaa\xab\x2c\xd5\x55\xe0\x7f\x9d\x26\x62\xe5\x2f\x8e\x0b\xad\x02\xba\xfd\x8a\x8d\xa8\x17\x85\xc9\xa7\xba\x4b\x4d\x61\xa3\xb8\x2c\xe2\xa3\xe5\x4e\x98\xef\xb9\x23\xde\xd9\x9f\x78\x65\x10\xf7\x09\xe3\x9f\x2c\x9d\xfe\x38\xb8\xc8\xca\x78\xe1\x8b\xd3\xa9\x2d\x4a\x81\xe5\x99\x37\xd4\x27\x37\xcc\x71\x48\xdc\xfb\xca\x28\xe6\xb5\x4b\x29\xbd\xe3\x88\x67\x38\x74\xe8\xad\x45\xdd\x03\x36\xfd\xae\xcb\xac\x3e\x11\xce\x27\x85\x64\xfa\xdc\xa3\xe6\xd0\x23\xc9\x39\x98\x3b\x48\xb2\x4e\xe2\x1a\xc1\xac\x36\xd9\x3d\x39\xbf\x3c\x3d\xef\x5e\x5f\x5c\x9e\x7d\x3b\xbe\x3a\xbd\x3e\xbb\xf8\x56\xdf\x93\xd7\x0f\x2c\x42\x3a\x39\xff\x7a\xf2\xf9\xc3\x71\xf7\xf4\xba\x7b\x7a\xf9\xed\xf4\x92\x0b\xef\xec\xbe\xd5\x79\x25\x5e\x9e\x20\xb5\x01\x0d\x35\x9b\xf9\xc1\xba\x4d\x98\x3f\xd2\xe2\x4c\x68\x41\x3c\x15\xbc\x23\xbd\xa8\x5c\xae\x36\x66\xbf\xc9\x7c\x9c\x46\x2e\x37\x09\x71\x58\xb3\xcc\x69\x1a\xaf\x0f\xfc\xa0\xdc\x8f\x3c\xae\x16\x44\x9b\x10\x7d\x62\xf8\xba\xc3\xfa\xb3\x99\xd8\x32\x42\xa3\xbd\xfe\x54\x7c\x40\x1a\x76\x62\x4b\xb2\x36\xa4\xc8\x3c\xc6\x5e\xc9\xa7\xb6\x4f\x83\xa1\x96\x3c\x6d\x53\x23\x8c\x7c\xaa\x3f\xb4\x3f\x7a\x50\x13\xcb\x3f\xfb\xd8\xd9\xbd\x4b\xe9\xc8\x7b\xa2\xf5\x23\x1e\x44\xd8\x99\xb5\x5d\x04\xdd\x19\x86\xe1\xb8\xad\xeb\xf1\xbb\xd6\xf2\x78\xdf\x3e\x2c\xb7\x2a\x3a\xd1\x7c\xcf\x0b\x3b\x69\xe2\x27\x8c\x4e\x2f\x7c\xef\xfb\x6d\xaf\x24\x6e\xac\x14\xe1\x93\x1e\xba\x30\xe0\x07\x17\x55\x6c\x4e\x3c\xd7\x76\x98\x19\x06\xe2\xcd\xd0\xbf\xd4\x00\xcd\x3c\x17\x49\x12\x1b\xa5\xc0\x05\x12\xf8\xa8\x7c\xda\xe0\xa3\xe0\xa3\xe0\xa3\xe0\xa3\xe0\xa3\xe0\xa3\xd2\xc5\xc2\x47\xe5\xb9\x1c\x9a\xf8\x28\x05\x2e\x85\xc2\x47\xe5\xd3\x06\x1f\x05\x1f\x05\x1f\x05\x1f\x05\x1f\x05\x1f\x95\x2e\x16\x3e\x2a\xcf\xc2\x87\xc4\x47\x29\xb0\xe8\x01\x3e\x2a\x9f\x36\xf8\x28\xf8\x28\xf8\x28\xf8\x28\xf8\x28\xf8\xa8\x74\xb1\xf0\x51\x59\xaf\xeb\xcd\x07\x9f\x3a\x17\xf7\x56\x14\xcb\xb5\x3c\x73\x36\xb2\x05\x2e\xcc\xbc\xa4\x7f\x45\x7c\x24\x6c\x31\xac\xff\x11\x79\x02\x53\x17\xcf\x0d\xd2\x26\x4e\xb0\x38\x99\x3d\xfc\x42\x9b\x37\x96\x4d\x1a\xf0\x22\x15\x2f\xe6\xf5\x50\x19\xd9\x31\x63\xc8\x2e\x3a\x95\x33\xc6\x46\xe4\x98\xc6\x98\x72\x5f\xea\xde\x2e\x99\xd5\xb8\x32\x50\x5f\xab\xed\x97\xf7\x2b\x6d\x87\xcf\xd9\x81\xb4\x63\xe8\xa7\xe2\x32\x9d\x28\xe0\x05\x5e\x1b\x78\x05\x44\x55\x10\x82\xac\x0d\xb6\x25\x50\x98\x07\x96\x10\x41\x0c\x25\x8b\x67\x62\x3f\xdd\x5e\x7f\x6a\x99\x08\x7e\xa2\xf3\xc9\xd2\xab\x71\xa8\x72\xda\xf1\x6d\xd2\xb6\x29\xf8\xb5\x11\x42\xa2\x31\xa7\x11\xaa\x4d\x7d\x63\x3c\xe6\xc7\x59\x6b\x4a\x7c\x3a\xf2\x26\x54\x33\x5c\x4b\xf3\x69\xdf\x70\x8c\x78\x37\x90\xa6\x39\x9e\x69\x38\x1a\x1b\xa7\xb2\xef\x11\x09\x22\xcb\x23\x2b\xe0\x30\x3f\xb0\x88\xe4\x16\x80\x0f\x2b\x2e\x55\x11\x86\xc8\x7a\x4d\x7b\x95\x21\x54\xb8\xb0\x0d\x86\x90\x46\x1e\x18\x22\x93\x38\x30\x44\x26\x69\x60\x08\x30\xc4\xaf\x12\x0d\x86\x00\x43\x80\x21\xc0\x10\x6b\xd9\x7d\xc9\x0c\x91\x75\x3d\xc7\x2a\x43\xa8\xb0\xa8\x03\x0c\x21\x8d\x3c\x30\x44\x26\x71\x60\x88\x4c\xd2\xc0\x10\x60\x88\x5f\x25\x1a\x0c\x01\x86\x00\x43\x80\x21\xd6\xb2\xfb\x92\x19\x22\xf7\x5a\xa6\x80\x59\xf4\x86\x99\x37\x6a\xad\x67\x9a\xab\x96\xcb\x10\x83\x25\x32\x6b\x7b\x4d\x2c\x21\x30\x6d\x76\x5c\xd8\xa4\xcd\x9b\x68\x75\x62\xef\x60\xf9\xd4\x72\x4e\xa9\x3a\xb8\x40\x95\x32\x23\x2d\xb8\xf1\x59\x6e\xd4\x04\xce\x7f\xbf\x1e\x20\xa5\x57\x0f\xe2\x5a\xee\xa5\x82\xa0\x22\xc1\x2c\x2d\xf5\x74\x73\xb0\xe8\x14\xbb\xb9\xa7\xf0\x0d\x1b\x45\x0c\xf8\x02\xee\x51\xbb\xfd\x14\x23\x11\xf8\xe4\x5e\x80\xb5\x00\x1f\xa5\x16\x61\x01\x7c\x64\x90\x07\xf0\xc9\x24\x0e\xe0\x93\x51\x5d\x91\xe0\x53\x95\xb3\x83\x0b\x54\x09\xf0\x01\xf8\x00\x7c\xd2\xd4\x03\x7c\x00\x3e\xaf\x16\x7c\x9e\x9b\x62\x24\x02\x9f\xdc\xab\xc6\x16\xe0\xa3\xd4\xca\x31\x80\x8f\x0c\xf2\x00\x3e\x99\xc4\x01\x7c\x32\xaa\x2b\x12\x7c\x6a\x72\x76\x70\x81\x2a\x01\x3e\x00\x1f\x80\x4f\x9a\x7a\x80\x0f\xc0\xe7\xd5\x82\xcf\x73\x53\x8c\xfa\xe0\x13\xdc\xba\xe6\xf5\x60\xaa\xcc\x4d\xbb\x96\xf5\xca\xe5\x4c\x00\x3b\x99\xb5\x01\x76\x32\x29\x7b\x5d\xb0\x03\x7b\xae\x9a\x3d\x7f\xa8\xd5\xca\x88\xe6\x9e\x5c\x72\xc9\x5b\x18\xf1\x38\x02\x6d\xc0\x7d\xc3\xd4\xb8\xe5\x6e\xd2\xa7\x5e\x80\x1d\x3c\x12\x44\xf5\xec\xfe\x93\xa7\x3b\x6d\x33\x37\x4c\x0d\x16\x6a\x91\x1b\x32\x47\xe3\xe7\x70\x99\x3b\x50\x34\x25\xf1\x1e\xa6\xa1\x37\xa2\x7a\x9c\x80\xf6\x8f\x3f\xb3\x43\xd6\x2c\xad\x53\x9e\x51\xd7\x66\x03\xe2\xd3\xa9\xcf\xc2\x78\x6f\x0e\xf7\xd7\x21\x73\x8d\x58\xfe\xd2\x39\xf5\xfd\xd5\x37\xec\xff\x19\xf0\xf0\xe4\xa7\xd7\xee\x6f\xff\x3d\xb9\xfe\xcf\xff\xae\x4f\xce\xbf\x7c\x39\xbb\xea\xec\xbe\x9d\x7f\x2f\xfc\x60\xfd\x7b\xf1\x97\x47\x1a\x7f\x69\x34\x62\xe1\xbb\x23\x42\x9e\x01\xe0\x87\x92\x98\xa1\xa7\x52\x46\xf5\xa2\x4b\x12\xda\x8d\xd5\xef\xae\xaa\x27\xda\x80\x6c\xea\x12\x75\x88\x57\xdc\x74\x22\x7e\x43\xd7\x32\x49\xbd\xec\xed\x5c\x2b\x8c\xab\xc0\x7a\x46\x30\xae\x2c\xf2\xc0\xb8\x99\xc4\x81\x71\x33\xaa\x03\xe3\x82\x71\xc1\xb8\x60\x5c\x30\x2e\x18\x17\x8c\x0b\xc6\x15\xd1\x27\x60\x5c\xa5\x18\x37\xe3\xce\xbd\x15\xc6\x55\x60\xe9\x2a\x18\x57\x16\x79\x60\xdc\x4c\xe2\xc0\xb8\x19\xd5\x81\x71\xc1\xb8\x60\x5c\x30\x2e\x18\x17\x8c\x0b\xc6\x05\xe3\x8a\xe8\x13\x30\xae\x52\x8c\x9b\x73\xad\xb2\x4a\x37\xe5\x7c\xac\x59\x2e\xf2\x00\xeb\x66\xd6\xf6\x9a\x58\x57\xe8\x3e\xc3\x27\x76\x1c\x48\xd5\xb9\x85\x69\x04\xfc\xaa\x08\xbf\x89\xd1\x91\x7c\x8f\xde\x53\x14\xac\x82\x76\x79\xc8\xb1\x20\x67\xbf\xc1\x96\x2f\xf7\x91\x90\xdd\x85\x0b\xb3\xfd\xc0\x96\x33\x53\xf6\x02\xb7\x14\x16\x30\xc2\xc5\x6f\x28\xdc\x7a\x36\x91\xc8\xa2\xe7\x5c\x6a\xa9\xd2\xed\x23\x61\xd1\x65\x92\x07\x8b\x9e\x49\x5c\x71\x16\x5d\xd2\x3b\x20\x16\xa6\x11\x16\x1d\x16\x1d\x16\xfd\xb1\x76\x58\x74\x58\xf4\xd7\x62\xd1\x15\xb9\xd5\x61\xce\x95\x62\x2a\xdd\xe8\x10\x16\x5d\x26\x79\xb0\xe8\x99\xc4\x15\x67\xd1\x25\xbd\x57\x5f\x61\x1a\x61\xd1\x61\xd1\x61\xd1\x1f\x6b\x87\x45\x87\x45\x7f\x2d\x16\x3d\xcb\x4d\xf9\x76\x66\x8f\xef\x77\x76\xfe\x0e\x00\x00\xff\xff\x4e\xa0\x3a\xfb\x82\xd5\x00\x00")

func data_test_fleet_api_units_json_bytes() ([]byte, error) {
	return bindata_read(
		_data_test_fleet_api_units_json,
		"data-test/fleet_api_units.json",
	)
}

func data_test_fleet_api_units_json() (*asset, error) {
	bytes, err := data_test_fleet_api_units_json_bytes()
	if err != nil {
		return nil, err
	}

	info := bindata_file_info{name: "data-test/fleet_api_units.json", size: 54658, mode: os.FileMode(420), modTime: time.Unix(1426714021, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"data/couchbase_node@.service.template": data_couchbase_node_service_template,
	"data/couchbase_sidekick@.service.template": data_couchbase_sidekick_service_template,
	"data/sync_gw_node@.service.template": data_sync_gw_node_service_template,
	"data/sync_gw_sidekick@.service.template": data_sync_gw_sidekick_service_template,
	"data-test/fleet_api_units.json": data_test_fleet_api_units_json,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for name := range node.Children {
		rv = append(rv, name)
	}
	return rv, nil
}

type _bintree_t struct {
	Func func() (*asset, error)
	Children map[string]*_bintree_t
}
var _bintree = &_bintree_t{nil, map[string]*_bintree_t{
	"data": &_bintree_t{nil, map[string]*_bintree_t{
		"couchbase_node@.service.template": &_bintree_t{data_couchbase_node_service_template, map[string]*_bintree_t{
		}},
		"couchbase_sidekick@.service.template": &_bintree_t{data_couchbase_sidekick_service_template, map[string]*_bintree_t{
		}},
		"sync_gw_node@.service.template": &_bintree_t{data_sync_gw_node_service_template, map[string]*_bintree_t{
		}},
		"sync_gw_sidekick@.service.template": &_bintree_t{data_sync_gw_sidekick_service_template, map[string]*_bintree_t{
		}},
	}},
	"data-test": &_bintree_t{nil, map[string]*_bintree_t{
		"fleet_api_units.json": &_bintree_t{data_test_fleet_api_units_json, map[string]*_bintree_t{
		}},
	}},
}}

// Restore an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, path.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// Restore assets under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        if err != nil { // File
                return RestoreAsset(dir, name)
        } else { // Dir
                for _, child := range children {
                        err = RestoreAssets(dir, path.Join(name, child))
                        if err != nil {
                                return err
                        }
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

